/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 30 09:09:26 GMT 2019
 */

package com.test.Calculator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.test.Calculator.CalcInterface;
import com.test.Calculator.Calculator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Calculator_ESTest extends Calculator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = Calculator.getResult(5749.04580195048, (-3819.0), '/');
      assertEquals((-1.505379890534297), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = Calculator.getResult((-687.94678544807), '*', '*');
      assertEquals((-28893.76498881894), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = Calculator.getResult((-5013.904618), 0.0, '+');
      assertEquals((-5013.904618), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = Calculator.performExpotenial(953.2842948, (-2214.7227742));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = Calculator.performExpotenial((-1.0), (-1.0));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CalcInterface calcInterface0 = mock(CalcInterface.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(calcInterface0).calculateService(anyDouble() , anyDouble());
      Calculator calculator0 = new Calculator(calcInterface0);
      double double0 = Calculator.perform((-1763.440584841), (-3526.881169682), '+');
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CalcInterface calcInterface0 = mock(CalcInterface.class, new ViolatedAssumptionAnswer());
      doReturn((-849.6)).when(calcInterface0).calculateService(anyDouble() , anyDouble());
      Calculator calculator0 = new Calculator(calcInterface0);
      double double0 = Calculator.perform((-68.963345066), (-1.0), '*');
      assertEquals(58591.2579680736, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CalcInterface calcInterface0 = mock(CalcInterface.class, new ViolatedAssumptionAnswer());
      doReturn((-849.6)).when(calcInterface0).calculateService(anyDouble() , anyDouble());
      Calculator calculator0 = new Calculator(calcInterface0);
      double double0 = Calculator.perform('R', 1456.37159841861, 'R');
      assertEquals((-69667.2), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = Calculator.getResult(0.0, 1.0, '/');
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = Calculator.getResult(3.081664098613251E-4, 3.081664098613251E-4, '.');
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = Calculator.getResult(2273.4665, (-301.42), '-');
      assertEquals(2574.8865, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = Calculator.getResult((-261.476443393), (-261.476443393), ',');
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = Calculator.getResult((-1763.440584841), (-1763.440584841), '+');
      assertEquals((-3526.881169682), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = Calculator.getResult(0.0, 0.0, '6');
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = Calculator.performExpotenial(1456.37159841861, 1456.37159841861);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        Calculator.perform('R', 1456.37159841861, 'R');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.test.Calculator.Calculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[17];
      Calculator.main(stringArray0);
      assertEquals(17, stringArray0.length);
  }
}
