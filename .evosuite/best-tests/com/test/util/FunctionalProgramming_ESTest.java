/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 30 09:13:59 GMT 2019
 */

package com.test.util;

import org.junit.Test;
import static org.junit.Assert.*;
import com.test.util.FunctionalProgramming;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FunctionalProgramming_ESTest extends FunctionalProgramming_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FunctionalProgramming functionalProgramming0 = new FunctionalProgramming();
      int int0 = functionalProgramming0.funcProg3(196251);
      assertEquals((-140250662), int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FunctionalProgramming functionalProgramming0 = new FunctionalProgramming();
      double double0 = functionalProgramming0.funcProg1(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FunctionalProgramming functionalProgramming0 = new FunctionalProgramming();
      double double0 = functionalProgramming0.funcProg1(1411345);
      assertEquals((-1.940232638E9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      int int0 = FunctionalProgramming.add((-1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      int int0 = FunctionalProgramming.add((-1242));
      assertEquals((-1241), int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FunctionalProgramming functionalProgramming0 = new FunctionalProgramming();
      String string0 = functionalProgramming0.concat("6CEV9fP]tz/i");
      assertEquals("6CEV9fP]tz/i3", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      int int0 = FunctionalProgramming.add(0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FunctionalProgramming functionalProgramming0 = new FunctionalProgramming();
      int int0 = functionalProgramming0.funcProg3((-1604));
      assertEquals(2572817, int0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      FunctionalProgramming functionalProgramming0 = new FunctionalProgramming();
      double double0 = functionalProgramming0.funcProg1((-1604));
      assertEquals(5145632.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      FunctionalProgramming functionalProgramming0 = new FunctionalProgramming();
      String string0 = functionalProgramming0.funcProg2((-1604));
      assertEquals("-16033", string0);
  }
}
